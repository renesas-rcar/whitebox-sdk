From 705cf63ed6b476ed6f9f427b72f3d60414806731 Mon Sep 17 00:00:00 2001
From: Sergiy Kibrik <Sergiy_Kibrik@epam.com>
Date: Mon, 8 May 2023 12:44:33 +0300
Subject: [PATCH 1/6] ufs: flush/invalidate command buffer

Cache maintenance required on platforms other than TI (which maitains cache
coherency out of the box using L3 interconnect).
---
 drivers/ufs/ufs.c | 65 +++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 63 insertions(+), 2 deletions(-)

diff --git a/drivers/ufs/ufs.c b/drivers/ufs/ufs.c
index 92b7e9fd7c..31177f1718 100644
--- a/drivers/ufs/ufs.c
+++ b/drivers/ufs/ufs.c
@@ -220,6 +220,14 @@ static int ufshcd_send_uic_cmd(struct ufs_hba *hba, struct uic_command *uic_cmd)
 	return 0;
 }
 
+/*HACK: stolen from ravb driver */
+static inline void ravb_invalidate_dcache(uintptr_t addr, size_t len)
+{
+	uintptr_t start = addr & ~((uintptr_t)ARCH_DMA_MINALIGN - 1);
+	uintptr_t end = roundup(addr + len, ARCH_DMA_MINALIGN);
+	invalidate_dcache_range(start, end);
+}
+
 /**
  * ufshcd_dme_set_attr - UIC command for DME_SET, DME_PEER_SET
  *
@@ -857,6 +865,7 @@ static inline int ufshcd_get_req_rsp(struct utp_upiu_rsp *ucd_rsp_ptr)
  */
 static inline int ufshcd_get_tr_ocs(struct ufs_hba *hba)
 {
+	ravb_invalidate_dcache((uintptr_t)hba->utrdl, sizeof(struct utp_transfer_req_desc));
 	return le32_to_cpu(hba->utrdl->header.dword_2) & MASK_OCS;
 }
 
@@ -869,6 +878,7 @@ static int ufshcd_check_query_response(struct ufs_hba *hba)
 {
 	struct ufs_query_res *query_res = &hba->dev_cmd.query.response;
 
+	ravb_invalidate_dcache((uintptr_t)hba->ucdl, sizeof(struct utp_transfer_cmd_desc));
 	/* Get the UPIU response */
 	query_res->response = ufshcd_get_rsp_upiu_result(hba->ucd_rsp_ptr) >>
 				UPIU_RSP_CODE_OFFSET;
@@ -883,6 +893,8 @@ static int ufshcd_copy_query_response(struct ufs_hba *hba)
 {
 	struct ufs_query_res *query_res = &hba->dev_cmd.query.response;
 
+	ravb_invalidate_dcache((uintptr_t)hba->ucdl, sizeof(struct utp_transfer_cmd_desc));
+
 	memcpy(&query_res->upiu_res, &hba->ucd_rsp_ptr->qr, QUERY_OSF_SIZE);
 
 	/* Get the descriptor */
@@ -924,6 +936,8 @@ static int ufshcd_exec_dev_cmd(struct ufs_hba *hba, enum dev_cmd_type cmd_type,
 	if (err)
 		return err;
 
+	flush_dcache_range((uintptr_t)hba->ucdl, (uintptr_t)hba->ucdl + sizeof(struct utp_transfer_cmd_desc));
+	flush_dcache_range((uintptr_t)hba->utrdl, (uintptr_t)hba->utrdl + sizeof(struct utp_transfer_req_desc));
 	err = ufshcd_send_command(hba, TASK_TAG);
 	if (err)
 		return err;
@@ -934,6 +948,7 @@ static int ufshcd_exec_dev_cmd(struct ufs_hba *hba, enum dev_cmd_type cmd_type,
 		return -EINVAL;
 	}
 
+	ravb_invalidate_dcache((uintptr_t)hba->ucdl, sizeof(struct utp_transfer_cmd_desc));
 	resp = ufshcd_get_req_rsp(hba->ucd_rsp_ptr);
 	switch (resp) {
 	case UPIU_TRANSACTION_NOP_IN:
@@ -1441,9 +1456,42 @@ static void prepare_prdt_table(struct ufs_hba *hba, struct scsi_cmd *pccb)
 	}
 
 	prepare_prdt_desc(&prd_table[table_length - i - 1], buf, datalen - 1);
-
+	flush_dcache_range((uintptr_t)pccb->pdata, (uintptr_t)pccb->pdata + pccb->datalen);
 	req_desc->prd_table_length = table_length;
 }
+/*
+ * ufshcd_get_rsp_upiu_data_seg_len - Get the data segment length
+ *				from response UPIU
+ * @ucd_rsp_ptr: pointer to response UPIU
+ *
+ * Return the data segment length.
+ */
+static inline unsigned int
+ufshcd_get_rsp_upiu_data_seg_len(struct utp_upiu_rsp *ucd_rsp_ptr)
+{
+	return be32_to_cpu(ucd_rsp_ptr->header.dword_2) &
+		MASK_RSP_UPIU_DATA_SEG_LEN;
+}
+
+/**
+ * ufshcd_copy_sense_data - Copy sense data in case of check condition
+ * @lrbp: pointer to local reference block
+ */
+static inline void ufshcd_copy_sense_data(struct utp_upiu_rsp *ucd_rsp_ptr,
+					  u8 *sense_buffer)
+{
+	int len;
+
+	if (sense_buffer &&
+	    ufshcd_get_rsp_upiu_data_seg_len(ucd_rsp_ptr)) {
+		int len_to_copy;
+
+		len = be16_to_cpu(ucd_rsp_ptr->sr.sense_data_len);
+		len_to_copy = min_t(int, RESPONSE_UPIU_SENSE_DATA_LENGTH, len);
+
+		memcpy(sense_buffer, ucd_rsp_ptr->sr.sense_data, len_to_copy);
+	}
+}
 
 static int ufs_scsi_exec(struct udevice *scsi_dev, struct scsi_cmd *pccb)
 {
@@ -1457,19 +1505,32 @@ static int ufs_scsi_exec(struct udevice *scsi_dev, struct scsi_cmd *pccb)
 	ufshcd_prepare_utp_scsi_cmd_upiu(hba, pccb, upiu_flags);
 	prepare_prdt_table(hba, pccb);
 
+	flush_dcache_range((uintptr_t)hba->ucdl, (uintptr_t)hba->ucdl + sizeof(struct utp_transfer_cmd_desc));
+	flush_dcache_range((uintptr_t)hba->utrdl, (uintptr_t)hba->utrdl + sizeof(struct utp_transfer_req_desc));
 	ufshcd_send_command(hba, TASK_TAG);
 
 	ocs = ufshcd_get_tr_ocs(hba);
 	switch (ocs) {
 	case OCS_SUCCESS:
+		ravb_invalidate_dcache((uintptr_t)hba->ucdl, sizeof(struct utp_transfer_cmd_desc));
 		result = ufshcd_get_req_rsp(hba->ucd_rsp_ptr);
 		switch (result) {
 		case UPIU_TRANSACTION_RESPONSE:
 			result = ufshcd_get_rsp_upiu_result(hba->ucd_rsp_ptr);
 
+			/* printk("%s: result=%x\n", __func__, result); */
 			scsi_status = result & MASK_SCSI_STATUS;
-			if (scsi_status)
+			if (scsi_status) {
+#if 0
+				u8 sense[RESPONSE_UPIU_SENSE_DATA_LENGTH] = { 0 };
+				ufshcd_copy_sense_data(hba->ucd_rsp_ptr, sense);
+				for (int i = 0; i < RESPONSE_UPIU_SENSE_DATA_LENGTH / 9; i++) {
+					for (int j = 0; j < 9; printk("%x ", sense[i*9 + j++]));
+					printk("\n");
+				}
+#endif
 				return -EINVAL;
+			}
 
 			break;
 		case UPIU_TRANSACTION_REJECT_UPIU:
-- 
2.34.1

