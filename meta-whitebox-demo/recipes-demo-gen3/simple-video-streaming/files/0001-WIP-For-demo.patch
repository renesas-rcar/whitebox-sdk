From 62e0542b894b05b016e232a16ea2703726d21884 Mon Sep 17 00:00:00 2001
From: Yuya Hamamachi <yuya.hamamachi.sx@renesas.com>
Date: Tue, 30 May 2023 17:50:18 +0900
Subject: [PATCH 1/3] WIP: For demo

Signed-off-by: Yuya Hamamachi <yuya.hamamachi.sx@renesas.com>
---
 server.py | 35 ++++++++++++++++++++---------------
 1 file changed, 20 insertions(+), 15 deletions(-)

diff --git a/server.py b/server.py
index 994637b..f5b90b9 100644
--- a/server.py
+++ b/server.py
@@ -16,6 +16,7 @@ import sys
 import cv2
 import datetime
 import numpy as np
+import shutil
 
 #HOST = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
 HOST = "0.0.0.0"
@@ -32,12 +33,7 @@ CAM_NUM = int(os.environ.get("CAM_NUM")) if os.environ.get("CAM_NUM") is not Non
 FOURCC = os.environ.get("CAM_FOURCC") if os.environ.get("CAM_FOURCC") is not None else "MJPG"
 FPS = int(os.environ.get("CAM_FPS")) if os.environ.get("CAM_FPS") is not None else 30
 
-cap = cv2.VideoCapture(CAM_NUM)
-cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(FOURCC[0], FOURCC[1], FOURCC[2], FOURCC[3]) )
-cap.set(cv2.CAP_PROP_FRAME_WIDTH, W)
-cap.set(cv2.CAP_PROP_FRAME_HEIGHT, H)
-cap.set(cv2.CAP_PROP_FPS, FPS)
-
+cap = ""
 # FPS related variables
 SHOW_FPS_FLAG = True
 counter = 0
@@ -82,12 +78,11 @@ class VNCServer(http.server.SimpleHTTPRequestHandler):
             _, output = cap.read()
         else: # is True
             output = self.generateDummyFrame()
-        output = self.procFrame(output)
+        self.proc_fps()
         return output
 
     def procFrame(self, cv_img):
         global SHOW_FPS_FLAG
-        self.proc_fps()
 
         output = cv_img
         if GRAYSCALE:
@@ -129,6 +124,10 @@ class VNCServer(http.server.SimpleHTTPRequestHandler):
             prev_fps = counter
             counter = 1
         prev_sec=sec
+        # Node-exporter
+        with open('/var/textfile_collector/fps.prom.tmp', 'w') as f:
+            f.write('camera_fps {}\n'.format(prev_fps))
+            _ = shutil.move(r'/var/textfile_collector/fps.prom.tmp', r'/var/textfile_collector/fps.prom')
 
     def do_GET(self):
         self.path = self.path.split('?')[0]
@@ -151,27 +150,33 @@ class VNCServer(http.server.SimpleHTTPRequestHandler):
             self.send_header('Age', 0)
             self.send_header('Content-type', 'multipart/x-mixed-replace; boundary=frame')
             self.end_headers()
+            _, enimg = cv2.imencode('.bmp', self.getFrame())
+            bmp_size = len(enimg)
             while True:
-                cv_img = self.getFrame()
-                _, enimg = cv2.imencode('.'+ext, cv_img)
+                _, enimg = cv2.imencode('.bmp', self.getFrame())
 
-                self.wfile.write(b'--frame\r\n')
-                self.send_header('Content-Type', 'image/'+ext)
-                self.send_header('Content-Length', len(enimg))
+                self.wfile.write(b'\r\n--frame\r\n')
+                self.send_header('Content-Type', 'image/bmp')
+                self.send_header('Content-Length', bmp_size)
                 self.end_headers()
                 self.wfile.write(enimg)
-                self.wfile.write(b'\r\n')
         else:
             http.server.SimpleHTTPRequestHandler.do_GET(self)
 
     def log_message(self, format, *args):
-        print(args)
         pass
 
 if __name__ == '__main__':
     if "--no-fps" in sys.argv:
         SHOW_FPS_FLAG = False
 
+    cap = cv2.VideoCapture(CAM_NUM)
+    cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(FOURCC[0], FOURCC[1], FOURCC[2], FOURCC[3]) )
+    cap.set(cv2.CAP_PROP_FRAME_WIDTH, W)
+    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, H)
+    cap.set(cv2.CAP_PROP_FPS, FPS)
+    cap.set(cv2.CAP_PROP_BUFFERSIZE, 2)
+
     socketserver.TCPServer.allow_reuse_address = True
     httpd = socketserver.TCPServer((HOST, PORT), VNCServer)
     httpd.allow_reuse_address = True
-- 
2.34.1

