From 5c83661594eca86e8e62b1b3860e35812aa53457 Mon Sep 17 00:00:00 2001
From: Adrien Ricciardi <aricciardi@baylibre.com>
Date: Mon, 4 Sep 2023 15:20:41 +0200
Subject: [PATCH 64/70] examples: renesas: Added R-Car S4 G4MH memory unlocker
 example application.

It allows to unlock the CAN 0 module access from Cortex-R52 core.

Signed-off-by: Adrien Ricciardi <aricciardi@baylibre.com>
---
 examples/renesas/memory_unlocker/.gitignore   |  3 ++
 examples/renesas/memory_unlocker/build.sh     | 17 +++++++
 .../cs_plus_rcar_download_all.py              | 37 ++++++++++++++
 .../renesas/memory_unlocker/memory_unlocker.c | 48 +++++++++++++++++++
 .../renesas/memory_unlocker/memory_unlocker.h | 42 ++++++++++++++++
 .../memory_unlocker/memory_unlocker.oil       | 25 ++++++++++
 6 files changed, 172 insertions(+)
 create mode 100644 examples/renesas/memory_unlocker/.gitignore
 create mode 100644 examples/renesas/memory_unlocker/build.sh
 create mode 100644 examples/renesas/memory_unlocker/cs_plus_rcar_download_all.py
 create mode 100644 examples/renesas/memory_unlocker/memory_unlocker.c
 create mode 100644 examples/renesas/memory_unlocker/memory_unlocker.h
 create mode 100644 examples/renesas/memory_unlocker/memory_unlocker.oil

diff --git a/examples/renesas/memory_unlocker/.gitignore b/examples/renesas/memory_unlocker/.gitignore
new file mode 100644
index 00000000..35be87bc
--- /dev/null
+++ b/examples/renesas/memory_unlocker/.gitignore
@@ -0,0 +1,3 @@
+_build/
+memory_unlocker/
+CMakeLists.txt
diff --git a/examples/renesas/memory_unlocker/build.sh b/examples/renesas/memory_unlocker/build.sh
new file mode 100644
index 00000000..649f5e7d
--- /dev/null
+++ b/examples/renesas/memory_unlocker/build.sh
@@ -0,0 +1,17 @@
+#!/usr/bin/env bash
+
+#stop on errors
+set -e
+
+if [[ ! -d "_build" ]]
+then
+    mkdir _build
+fi
+
+echo "*** Run Goil ***"
+goil --target=renesas/g4mh --templates=../../../goil/templates/ memory_unlocker.oil
+cd _build
+echo "*** Run CMake ***"
+cmake -G "Unix Makefiles" -D CMAKE_TOOLCHAIN_FILE=../memory_unlocker/compiler.cmake ..
+echo "*** Run Make ***"
+make
diff --git a/examples/renesas/memory_unlocker/cs_plus_rcar_download_all.py b/examples/renesas/memory_unlocker/cs_plus_rcar_download_all.py
new file mode 100644
index 00000000..1267f09e
--- /dev/null
+++ b/examples/renesas/memory_unlocker/cs_plus_rcar_download_all.py
@@ -0,0 +1,37 @@
+﻿
+import time
+ClearConsole()
+print "1PE_ATK2"
+print "Resetting debugger"
+debugger.Reset()
+time.sleep(2)
+print "SYSCTRL 0x0003"
+debugger.Register.SetValue("SYSCTRL.BOOTCTRL", 0x0003)
+time.sleep(2)
+print "CPU Stop"
+debugger.Stop()
+time.sleep(2)
+print "HBG_CS 0x00000003"
+debugger.Register.SetValue("HBG_CS0.HBGPROT0", 0x00000003)
+debugger.Register.SetValue("HBG_CS1.HBGPROT0", 0x00000003)
+debugger.Register.SetValue("HBG_CS2.HBGPROT0", 0x00000003)
+#time.sleep(1)
+print "CSRM 0x12B9B0A0"
+debugger.Register.SetValue("CSRM0.CSRM0CSIFCODE", 0x12B9B0A0)
+debugger.Register.SetValue("CSRM1.CSRM1CSIFCODE", 0x12B9B0A0)
+debugger.Register.SetValue("CSRM2.CSRM2CSIFCODE", 0x12B9B0A0)
+#time.sleep(1)
+print "Download Trampoline/Hello_world"
+debugger.Download.LoadModule("_build/memory_unlocker_exe.abs", downloadOption = DownloadOption.SymbolOnly, append = False, flashErase = False, vendorType = VendorType.Auto)
+print "Download Trampoline/Hello_world (RUN)"
+debugger.Download.Hex("_build/memory_unlocker_exe.run", offset = 0xF0000000, append = True, flashErase = False)
+print "CSRM 0x12B9B0A1"
+debugger.Register.SetValue("CSRM0.CSRM0CSIFCODE", 0x12B9B0A1)
+debugger.Register.SetValue("CSRM1.CSRM1CSIFCODE", 0x12B9B0A1)
+debugger.Register.SetValue("CSRM2.CSRM2CSIFCODE", 0x12B9B0A1)
+#time.sleep(1)
+print "Set Reset PC"
+debugger.Register.SetValue("PC", 0x200)
+#time.sleep(1)
+print "Starting G4"
+debugger.Go()
diff --git a/examples/renesas/memory_unlocker/memory_unlocker.c b/examples/renesas/memory_unlocker/memory_unlocker.c
new file mode 100644
index 00000000..f641ce9f
--- /dev/null
+++ b/examples/renesas/memory_unlocker/memory_unlocker.c
@@ -0,0 +1,48 @@
+/** @file memory_unlocker.c
+ * Enable registers access for certain peripherals from the Application Domain.
+ */
+#include <tpl_os.h>
+#include "memory_unlocker.h"
+
+FUNC(int, OS_APPL_CODE) main(void)
+{
+	int channel;
+
+	// Issue an AXI bus stop request
+	STBY_CTRL = 0x00000001;
+
+	// P-Bus group 2
+	PBG20KCPROT = PROTECTION_DISABLE_KEY; // Write protect release
+	PBG20PROT0_m(2) = 0x000000D0; // STBC PBG protection release
+	PBG20PROT1_m(2) = 0x040000FF; // STBC PBG protection release SPID=0~7 enable
+	PBG21PROT0_m(1) = 0x000000D0; // Port configuration register PBG protection release
+	PBG21PROT1_m(1) = 0x040000FF; // Port configuration register PBG protection release　SPID=0~7 enable
+
+	// P-Bus group 7
+	PBG70KCPROT = PROTECTION_DISABLE_KEY; // Write protect release
+	PBG70PROT0_m(3) = 0x000000D0; // RIIC0 PBG protection release
+	PBG70PROT1_m(3) = 0x000000FF; // RIIC0 PBG protection release SPID=0~7 enable
+
+	// P-Bus group 8
+	PBG80KCPROT = PROTECTION_DISABLE_KEY; // Write protect release
+	for (channel = 0; channel < 8; channel++) // Channels 2 to 9 are the RSCFD0 CAN0 to CAN7
+		PBG80PROT0_m(channel + 2) = 0x000000D3;
+	PBG80PROT0_m(10) = 0x000000D3; // RSCFD0 common registers
+	PBG80PROT0_m(12) = 0x000000D3; // RSCFD0 global registers
+
+	// H-Bus
+	HBGKCPROT_PFS = PROTECTION_DISABLE_KEY; // Write protect release
+	HBGPROT0_PFS = 0x000000D0; // HBG_PFS protection release
+	HBGPROT1_PFS = 0x000000FF; // HBG_PFS protection release　SPID=0~7 enable
+
+	// Standby Controller
+	MSRKCPROT = PROTECTION_DISABLE_KEY; // Write protect release
+
+	StartOS(OSDEFAULTAPPMODE);
+	return 0;
+}
+
+TASK(unused_task)
+{
+	TerminateTask();
+}
diff --git a/examples/renesas/memory_unlocker/memory_unlocker.h b/examples/renesas/memory_unlocker/memory_unlocker.h
new file mode 100644
index 00000000..02741bf1
--- /dev/null
+++ b/examples/renesas/memory_unlocker/memory_unlocker.h
@@ -0,0 +1,42 @@
+#ifndef H_MEMORY_UNLOCKER_H
+#define H_MEMORY_UNLOCKER_H
+
+#define PROTECTION_DISABLE_KEY 0xA5A5A501
+
+// Register base addresses
+#define MCCR_SELB1_base 0xF8F18200
+#define PBG20_base  0xFFDE0B00 // P-Bus Group 2L
+#define PBG21_base 0xFFDE0C00 // P-Bus Group 2L
+#define PBGERRSLV20_base 0xFFDE1000 // P-Bus Group 2L
+#define PBG70_base 0xFFF49400 // P-Bus Group 7
+#define PBGERRSLV70_base 0xFFF4A000 // P-Bus Group 7
+#define PBG80_base 0xFFF29300 // P-Bus Group 8
+#define PBGERRSLV80_base 0xFFF2A000 // P-Bus Group 8
+#define HBGERRSLV_PFS_base 0xF8F19700
+#define STBC_base 0xFF981000
+#define HBG_PFS_base 0xF8F12700
+
+// Register addresses
+#define STBY_CTRL (*(volatile unsigned long  *) (MCCR_SELB1_base + 0x0034))
+
+#define PBG20KCPROT (*(volatile unsigned long *) (PBGERRSLV20_base + 0x18))
+#define PBG20PROT0_m(m) (*(volatile unsigned long *) (PBG20_base + 0x0 + 0x8 * (m)))
+#define PBG20PROT1_m(m) (*(volatile unsigned long *) (PBG20_base + 0x4 + 0x8 * (m)))
+#define PBG21PROT0_m(m) (*(volatile unsigned long *) (PBG21_base + 0x0 + 0x8 * (m)))
+#define PBG21PROT1_m(m) (*(volatile unsigned long *) (PBG21_base + 0x4 + 0x8 * (m)))
+
+#define PBG70KCPROT (*(volatile unsigned long *) (PBGERRSLV70_base + 0x18))
+#define PBG70PROT0_m(m) (*(volatile unsigned long *) (PBG70_base + 0x0 + 0x8 * (m)))
+#define PBG70PROT1_m(m) (*(volatile unsigned long *) (PBG70_base + 0x4 + 0x8 * (m)))
+
+#define PBG80KCPROT (*(volatile unsigned long *) (PBGERRSLV80_base + 0x18))
+#define PBG80PROT0_m(m) (*(volatile unsigned long *) (PBG80_base + 0x0 + 0x8 * (m)))
+#define PBG80PROT1_m(m) (*(volatile unsigned long *) (PBG80_base + 0x4 + 0x8 * (m)))
+
+#define HBGKCPROT_PFS (*(volatile unsigned long *) (HBGERRSLV_PFS_base + 0x18))
+#define HBGPROT0_PFS (*(volatile unsigned long *) (HBG_PFS_base))
+#define HBGPROT1_PFS (*(volatile unsigned long *) (HBG_PFS_base + 0x4))
+
+#define MSRKCPROT (*(volatile unsigned long *) (STBC_base + 0x710))
+
+#endif
diff --git a/examples/renesas/memory_unlocker/memory_unlocker.oil b/examples/renesas/memory_unlocker/memory_unlocker.oil
new file mode 100644
index 00000000..56eb1c13
--- /dev/null
+++ b/examples/renesas/memory_unlocker/memory_unlocker.oil
@@ -0,0 +1,25 @@
+OIL_VERSION = "4.2";
+
+CPU only_one_task {
+  OS config {
+    STATUS = EXTENDED;
+    BUILD = TRUE {
+      APP_SRC = "memory_unlocker.c";
+      APP_NAME = "memory_unlocker_exe";
+      TRAMPOLINE_BASE_PATH = "../../../";
+      LDFLAGS="-debug -nocompress -NOOPtimize -memory=high -nologo -SHow=ALL";
+      CFLAGS="-Xcpu=g4mh -g -g_line -Xfxu=off -Xasm_path=.";
+      LINKER = "rlink";
+      SYSTEM = CMAKE;
+    };
+  };
+
+  APPMODE stdAppmode {};
+
+  TASK unused_task {
+    PRIORITY = 1;
+    AUTOSTART = TRUE { APPMODE = stdAppmode; };
+    ACTIVATION = 1;
+    SCHEDULE = FULL;
+  };
+};
-- 
2.34.1

