From 6b74d43288605ad90c96427592aa156b87034d39 Mon Sep 17 00:00:00 2001
From: Adrien Ricciardi <aricciardi@baylibre.com>
Date: Mon, 2 Oct 2023 14:50:19 +0200
Subject: [PATCH 14/38] net: can: Improved the baud rate settings compliance
 with AUTOSAR R22-11.

Signed-off-by: Adrien Ricciardi <aricciardi@baylibre.com>
---
 net/can/Can_GeneralTypes.h | 62 ++++++++++++++++++++++++++------------
 net/can/tpl_can_core.c     | 15 ++++++++-
 2 files changed, 56 insertions(+), 21 deletions(-)

diff --git a/net/can/Can_GeneralTypes.h b/net/can/Can_GeneralTypes.h
index 73d7af46..6b0fe94f 100644
--- a/net/can/Can_GeneralTypes.h
+++ b/net/can/Can_GeneralTypes.h
@@ -28,6 +28,7 @@
 #define CAN_GENERAL_TYPES_H
 
 #include <ComStack_Types.h>
+#include <tpl_os.h>
 
 #define TPL_CAN_ID_TYPE_STANDARD (0x00 << 30)
 #define TPL_CAN_ID_TYPE_FD_STANDARD (0x01 << 30)
@@ -37,23 +38,6 @@
 #define TPL_CAN_ID_TYPE_GET(id) ((id & TPL_CAN_ID_TYPE_MASK) >> 30)
 #define TPL_CAN_ID_MASK (0x3FFFFFFF)
 
-/**
- * @note This will be replaced by a table provided to Can_Init() with
- * several configurations mentionning both baud rates for CAN 2.0 and CAN FD.
- */
-typedef enum
-{
-	CAN_BAUD_RATE_50_KBPS,
-	CAN_BAUD_RATE_100_KBPS,
-	CAN_BAUD_RATE_125_KBPS,
-	CAN_BAUD_RATE_250_KBPS,
-	CAN_BAUD_RATE_500_KBPS,
-	CAN_BAUD_RATE_1_MBPS,
-	CAN_BAUD_RATE_2_MBPS,
-	CAN_BAUD_RATE_5_MBPS,
-	CAN_BAUD_RATE_COUNT
-} tpl_can_baud_rate_t;
-
 /**
  * @typedef tpl_can_protocol_version_t
  *
@@ -96,6 +80,45 @@ typedef struct
 	uint8 *sdu;
 } Can_PduType;
 
+/**
+ * @typedef CanControllerFdBaudrateConfig
+ *
+ * This optional container contains bit timing related configuration parameters of the
+ * CAN controller(s) for payload and CRC of a CAN FD frame. If this container exists
+ * the controller supports CAN FD frames.
+ */
+typedef struct
+{
+	uint32 CanControllerFdBaudRate; // Should be of type EcucFloatParamDef, but we avoid floating numbers
+	uint32 CanControllerPropSeg;
+	uint32 CanControllerSeg1;
+	uint32 CanControllerSeg2;
+	uint32 CanControllerSspOffset;
+	uint32 CanControllerSyncJumpWidth;
+	tpl_bool CanControllerTxBitRateSwitch;
+} CanControllerFdBaudrateConfig;
+
+/**
+ * @typedef CanControllerBaudrateConfig
+ *
+ * This container contains bit timing related configuration parameters of
+ * the CAN controller(s).
+ *
+ * @note Base types have been used here instead of the ECUxxx types to avoid
+ * duplication.
+ */
+typedef struct
+{
+	uint32 CanControllerBaudRate; // Should be of type EcucFloatParamDef, but we avoid floating numbers
+	uint32 CanControllerBaudRateConfigID;
+	uint32 CanControllerPropSeg;
+	uint32 CanControllerSeg1;
+	uint32 CanControllerSeg2;
+	uint32 CanControllerSyncJumpWidth;
+	tpl_bool use_fd_configuration; // If this value is true, the can_fd_config must be taken into account
+	CanControllerFdBaudrateConfig can_fd_config;
+} CanControllerBaudrateConfig;
+
 struct tpl_can_controller_config_t;
 /**
  * @struct tpl_can_controller_t
@@ -107,7 +130,7 @@ struct tpl_can_controller_t
 {
 	uint32 base_address;
 	int (*init)(struct tpl_can_controller_config_t *config);
-	int (*set_baudrate)(struct tpl_can_controller_t *ctrl, tpl_can_baud_rate_t baud_rate);
+	int (*set_baudrate)(struct tpl_can_controller_t *ctrl, CanControllerBaudrateConfig *baud_rate_config);
 	Std_ReturnType (*transmit)(struct tpl_can_controller_t *ctrl, const Can_PduType *pdu_info);
 	Std_ReturnType (*receive)(struct tpl_can_controller_t *ctrl, Can_PduType *pdu_info);
 	int (*is_data_available)(struct tpl_can_controller_t *ctrl);
@@ -123,8 +146,7 @@ struct tpl_can_controller_config_t
 {
 	tpl_can_controller_t *controller;
 	tpl_can_protocol_version_t protocol_version;
-	tpl_can_baud_rate_t nominal_baud_rate; // The classic CAN baud rate, or the arbitration baud rate when in CAN FD mode
-	tpl_can_baud_rate_t fd_data_baud_rate; // The data baud rate for CAN-FD when bit rate switch is set, this value is ignored for classic CAN
+	CanControllerBaudrateConfig baud_rate_config;
 };
 typedef struct tpl_can_controller_config_t tpl_can_controller_config_t;
 
diff --git a/net/can/tpl_can_core.c b/net/can/tpl_can_core.c
index 770ae82b..a1236639 100644
--- a/net/can/tpl_can_core.c
+++ b/net/can/tpl_can_core.c
@@ -68,13 +68,26 @@ int Can_Init(const Can_ConfigType *Config)
 Std_ReturnType Can_SetBaudrate(uint8 Controller, uint16 BaudRateConfigID)
 {
 	tpl_can_controller_t *controller;
+	CanControllerBaudrateConfig *baud_rate_config;
+	unsigned int i;
 
 	// Make sure the controller has been registered and initialized
 	if (Controller >= controllers_count)
 		return E_NOT_OK;
 	controller = controller_configs[Controller].controller;
 
-	if (controller->set_baudrate(controller, BaudRateConfigID))
+	// Look for the baud rate configuration matching the requested ID
+	for (i = 0; i < controllers_count; i++)
+	{
+		baud_rate_config = &controller_configs[i].baud_rate_config;
+		if (baud_rate_config->CanControllerBaudRateConfigID == BaudRateConfigID)
+			break;
+	}
+	// Was a matching baud rate configuration found ?
+	if (i == controllers_count)
+		return E_NOT_OK;
+
+	if (controller->set_baudrate(controller, baud_rate_config))
 		return E_NOT_OK;
 	return E_OK;
 }
-- 
2.34.1

