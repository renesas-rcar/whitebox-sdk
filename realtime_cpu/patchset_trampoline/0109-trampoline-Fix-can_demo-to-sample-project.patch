From 16e75e39c13b6bf278b0ec9d2ea10b226e72d3cb Mon Sep 17 00:00:00 2001
From: Tsutomu Muroya <tsutomu.muroya.jy@bp.renesas.com>
Date: Wed, 1 Nov 2023 16:46:38 +0900
Subject: [PATCH] trampoline: Fix can_demo to sample project

Signed-off-by: Tsutomu Muroya <tsutomu.muroya.jy@bp.renesas.com>
---
 .../cortex-a/armv8/spider/sample/can_demo.c   | 80 ++++++++++++++++---
 1 file changed, 69 insertions(+), 11 deletions(-)

diff --git a/examples/cortex-a/armv8/spider/sample/can_demo.c b/examples/cortex-a/armv8/spider/sample/can_demo.c
index 4d03249a..fd3f0e58 100644
--- a/examples/cortex-a/armv8/spider/sample/can_demo.c
+++ b/examples/cortex-a/armv8/spider/sample/can_demo.c
@@ -26,37 +26,76 @@
  */
 #include <Can.h>
 #include <CanIf.h>
+#include <spider_can.h>
 #include <stdio.h>
 #include <string.h>
 #include <tpl_os.h>
 
 int can_demo_init(void)
 {
-	// Statically list the CAN controllers to use in the application
-	static tpl_can_controller_t *can_controllers[] =
+	// Statically list the configuration of each CAN controller used in the application
+	static tpl_can_controller_config_t can_controllers_config[] =
 	{
-		&spider_can_controller_0,
-		NULL
+		// First controller will use CAN 2.0
+		{
+			&spider_can_controller_0,
+			// CAN 2.0 at 250Kbps
+			#if 0
+			{
+				.CanControllerBaudRate = 250,
+				.CanControllerBaudRateConfigID = 0,
+				.CanControllerPropSeg = 1, // Fine tune the bus speed, it is measured at 245KHz
+				.CanControllerSeg1 = 11,
+				.CanControllerSeg2 = 4,
+				.CanControllerSyncJumpWidth = 4,
+				.use_fd_configuration = FALSE
+			}
+			#endif
+			// CAN-FD at 1Mbps without BRS
+			#if 1
+			{
+				.CanControllerBaudRate = 1000,
+				.CanControllerBaudRateConfigID = 0,
+				.CanControllerPropSeg = 1, // Fine tune the bus speed, it is measured at 1MHz
+				.CanControllerSeg1 = 5,
+				.CanControllerSeg2 = 2,
+				.CanControllerSyncJumpWidth = 2,
+				.use_fd_configuration = TRUE,
+				{
+					.CanControllerFdBaudRate = 5000,
+					.CanControllerPropSeg = 2,
+					.CanControllerSeg1 = 10,
+					.CanControllerSeg2 = 5,
+					.CanControllerSspOffset = 15,
+					.CanControllerSyncJumpWidth = 5,
+					.CanControllerTxBitRateSwitch = FALSE
+				}
+			}
+			#endif
+		}
 	};
 	static Can_ConfigType can_config_type =
 	{
-		can_controllers
+		can_controllers_config,
+		sizeof(can_controllers_config) / sizeof(can_controllers_config[0])
 	};
 	int ret;
 
-	// Initialize the CAN module 0 channel 0 at 125 Kbit/s (the default baud rate)
+	// Initialize the CAN module 0 channel 0 with the enabled configuration
 	ret = Can_Init(&can_config_type);
 	if (ret)
 		return -1;
 
+	return 0;
 }
 
 TASK(can_task)
 {
 	Can_PduType can_pdu, *pointer_can_pdu;
 	PduInfoType pdu_info;
-	uint8 payload[64];
+	uint8 payload[TPL_CAN_FD_FRAME_MAXIMUM_PAYLOAD_SIZE];
 	int i;
+	Can_IdType id_without_flags, id_flags;
 
 	// Send a frame to tell that the program is ready
 	can_pdu.id = 0x123 | TPL_CAN_ID_TYPE_STANDARD;
@@ -72,13 +111,32 @@ TASK(can_task)
 	{
 		if (CanIf_ReadRxPduData(0, &pdu_info) == E_OK)
 		{
-			// Make sure the payload size is compatible with CAN 2.0
+			// Make sure the payload size is compatible with CAN-FD
 			pointer_can_pdu = (Can_PduType *) pdu_info.SduDataPtr;
-			if (pointer_can_pdu->length > 8)
+			if (pointer_can_pdu->length > TPL_CAN_FD_FRAME_MAXIMUM_PAYLOAD_SIZE)
 				continue;
 
-			// Increment the CAN ID and the payload bytes
-			pointer_can_pdu->id++;
+			// Increment the CAN ID and wrap to 0 if the highest ID was received
+			id_flags = pointer_can_pdu->id & TPL_CAN_ID_TYPE_MASK;
+			if ((id_flags == TPL_CAN_ID_TYPE_STANDARD) || (id_flags == TPL_CAN_ID_TYPE_FD_STANDARD))
+			{
+				id_without_flags = pointer_can_pdu->id & TPL_CAN_ID_STANDARD_MASK;
+				if (id_without_flags >= 1023) // 11-bit standard ID
+					id_without_flags = 0;
+				else
+					id_without_flags++;
+			}
+			else
+			{
+				id_without_flags = pointer_can_pdu->id & TPL_CAN_ID_EXTENDED_MASK;
+				if (id_without_flags >= 536870911) // 29-bit extended ID
+					id_without_flags = 0;
+				else
+					id_without_flags++;
+			}
+			pointer_can_pdu->id = id_flags | id_without_flags;
+
+			// Increment the payload bytes
 			for (i = 0; i < pointer_can_pdu->length; i++)
 				pointer_can_pdu->sdu[i]++;
 
-- 
2.25.1

